### **Learning Notes: Network Essentials & Cyber Security**  
**Session 4: Security by Design, Policies & Incident Response**  

---

#### **I. Objectives**  
1. Understand the CIA triad (Confidentiality, Integrity, Availability) and its role in security design.  
2. Explain encryption technologies (SSL/TLS, VPNs, SSH) and their implementation.  
3. Identify common vulnerabilities (OWASP Top 10) and mitigation strategies.  
4. Analyze incident response workflows and post-incident remediation.  
5. Recognize security policies and their importance in risk mitigation.  

---

#### **II. Key Concepts**  
##### **A. CIA Triad & Security by Design**  
- **Confidentiality**: Ensure only authorized access to data (e.g., encryption, access controls).  
- **Integrity**: Maintain data accuracy (e.g., hashing, digital signatures).  
- **Availability**: Ensure systems/resources are accessible when needed (e.g., redundancy, patching).  
- **Security by Design**: Integrate security at every development stage, not as an afterthought.  

##### **B. Encryption Technologies**  
1. **SSL/TLS**:  
   - Combines asymmetric encryption (handshake/authentication) and symmetric encryption (data transfer for efficiency).  
   - **Handshake Process**: Client-server negotiation â†’ Digital certificate validation â†’ Session key exchange.  
   - **Downgrade Attacks**: Forcing older, vulnerable protocol versions (e.g., TLS 1.0). Mitigation: Disable legacy protocols.  
2. **VPNs**:  
   - Encrypt traffic between remote users and corporate networks (e.g., OpenVPN, IPsec).  
   - Risks: Security gaps if endpoints are unprotected.  
3. **SSH**: Secure remote server access using cryptographic keys.  

##### **C. Common Vulnerabilities (OWASP Top 5)**  
1. **Broken Access Control**: Unauthorized data access (e.g., modifying user IDs in URLs).  
   - Mitigation: Role-based access, least privilege.  
2. **Cryptographic Failures**:  
   - Storing plaintext passwords, weak encryption.  
   - Mitigation: Hashing, TLS, key rotation.  
3. **Injection Attacks**: Malicious code execution (e.g., SQL injection via unsanitized inputs).  
4. **Insecure Design**: Flawed security architecture (e.g., password reset without verification).  
5. **Security Misconfiguration**: Debug mode enabled in production, default credentials.  

##### **D. Incident Response**  
- **Steps**: Identification â†’ Containment â†’ Eradication â†’ Recovery â†’ Lessons Learned.  
- **Priorities**: Minimize damage, preserve evidence, restore operations.  
- **Key Tools**:  
  - **IDS/IPS**: Monitor anomalies (e.g., port scans, brute-force attempts).  
  - **SIEM Systems**: Centralized log analysis for threat detection.  
- **Hoaxes & Social Engineering**: Fake threats (e.g., phishing scams) exploiting panic. Mitigation: Employee training.  

##### **E. Security Policies**  
- **Acceptable Use Policy**: Restricts non-business activities (e.g., gaming, personal servers).  
- **Access Control Policy**: Role-based permissions, MFA.  
- **Patch Management**: Regular updates to fix vulnerabilities.  
- **Incident Response Plan**: Defined roles, escalation paths, communication protocols.  

---

#### **III. Questions for Review**  
1. **Confidentiality & Encryption**:  
   - Why does TLS use asymmetric encryption for handshakes but symmetric encryption for data transfer?  
   - How does a "downgrade attack" undermine SSL/TLS security?  

2. **Vulnerabilities**:  
   - What is the risk of SQL injection, and how can input sanitization prevent it?  
   - Why is storing passwords in plaintext a "cryptographic failure"?  

3. **Incident Response**:  
   - What are the risks of "knee-jerk reactions" (e.g., immediately shutting down a compromised system)?  
   - How does logging and documentation support post-incident legal compliance?  

4. **Policies & Design**:  
   - How does the *least privilege* principle mitigate unauthorized access?  
   - Why should security be "baked into" systems rather than added later?  

5. **Case Study (Website Defacement)**:  
   - What steps in the incident response scenario were effective? What could be improved (e.g., faster root cause analysis)?  

---

**Key Takeaways**:  
- Encryption (SSL/TLS, VPNs) and access controls are critical for confidentiality.  
- Proactive patching, policy enforcement, and employee training reduce vulnerabilities.  
- Structured incident response minimizes damage and supports recovery.  
- Security architects design holistic strategies (policies, infrastructure, training).  

> ðŸ’¡ **Action Item**: Research your organizationâ€™s security policies (e.g., incident response plan, acceptable use policy) and identify one improvement opportunity.
